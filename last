print('задание 1')
import tkinter as tk

class Keyboard:
    def __init__(self, master):
        self.master = master
        self.text_field = tk.Text(master, height=10, width=40)
        self.text_field.pack()

        self.key_frame = tk.Frame(master)
        self.key_frame.pack()

        self.keys = []
        for i in range(26):
            key = tk.Button(self.key_frame, text=chr(65+i), command=lambda c=chr(65+i): self.append_text(c))
            key.grid(row=i//10, column=i%10)
            self.keys.append(key)

        self.func_keys = []
        func_keys = ['Backspace', 'Enter', 'Space']
        for i, key in enumerate(func_keys):
            func_key = tk.Button(self.key_frame, text=key)
            func_key.grid(row=3, column=i)
            self.func_keys.append(func_key)

        self.func_keys[0].bind('<Button-1>', lambda e: self.text_field.delete(tk.END, tk.END-1))
        self.func_keys[1].bind('<Button-1>', lambda e: self.append_text('\n'))
        self.func_keys[2].bind('<Button-1>', lambda e: self.append_text(' '))

    def append_text(self, text):
        self.text_field.insert(tk.END, text)

root = tk.Tk()
keyboard = Keyboard(root)
root.mainloop()
print('задание 2')
from tkinter import *
from tkinter import ttk
root = Tk()
root.title("ПРИЛОЖЕНИЕ")
root.geometry("400x400")
label = ttk.Label(text="Языки для сайтов", font=('Arial', 20), foreground='blue')
label.pack()
label = ttk.Label(text="PHP и JavaScript", font=('Arial', 16), foreground='green')
label.place(x=120, y=50)
label = ttk.Label(text="              Языки программирования PHP и JavaScript позволяют")
label.place(y=80)
label = ttk.Label(text="сделать сайт динамичным, то есть раегирующим на действия")
label.place(y=95)
label = ttk.Label(text="пользователя. Например, можно сделать красивую выпадающую")
label.place(y=110)
label = ttk.Label(text="меношку или слайдер")
label.place(y=125)
label = ttk.Label(text="Виды скриптов", font=('Arial', 16), foreground='green')
label.place(x=120, y=170)
label = ttk.Label(text="                       Для этого пишутс скрипты (англ. script - 'сценарий') -")
label.place(y=210)
label = ttk.Label(text="программы, позволяющие реагировать на действия пользователя.")
label.place(y=225)
label = ttk.Label(text="Скрипты бывают двух видов:")
label.place(y=240)
label = ttk.Label(text="* те, которые выполняются на сервере, а результат их", font=('Arial', 8))
label.place(x=25, y=275)
label = ttk.Label(text="  выполнения приходит в браузер к пользователю уже в", font=('Arial', 8))
label.place(x=25, y=290)
label = ttk.Label(text="  готовом виде. Это скрипты, написание на языке PHP. На", font=('Arial', 8))
label.place(x=25, y=305)
label = ttk.Label(text="  нем пишуться CMS-ки - системы управления контентом.", font=('Arial', 8))
label.place(x=25, y=320)
label = ttk.Label(text="* те, которые выполняются прямо в браузере пользователя. ", font=('Arial', 8))
label.place(x=25, y=335)
label = ttk.Label(text="  Это скрипты, написанные на языке JavaScript. Они чаще", font=('Arial', 8))
label.place(x=25, y=350)
label = ttk.Label(text="  всего используются для, того чтобы сделать страницу", font=('Arial', 8))
label.place(x=25, y=365)
label = ttk.Label(text="  более удобной и красивой.", font=('Arial', 8))
label.place(x=25, y=380)
root.mainloop()
print('задание 3')
import tkinter as tk
from tkinter import messagebox

class RegistrationForm:
    def __init__(self, master):
        self.master = master
        self.master.title("Registration Form")

        self.fio_label = tk.Label(master, text="ФИО:")
        self.fio_label.grid(row=0, column=0)
        self.fio_entry = tk.Entry(master, width=30)
        self.fio_entry.grid(row=0, column=1)

        self.birth_label = tk.Label(master, text="Год рождения (дд.мм.гггг):")
        self.birth_label.grid(row=1, column=0)
        self.birth_entry = tk.Entry(master, width=30)
        self.birth_entry.grid(row=1, column=1)

        self.login_label = tk.Label(master, text="Логин:")
        self.login_label.grid(row=2, column=0)
        self.login_entry = tk.Entry(master, width=30)
        self.login_entry.grid(row=2, column=1)

        self.email_label = tk.Label(master, text="Email:")
        self.email_label.grid(row=3, column=0)
        self.email_entry = tk.Entry(master, width=30)
        self.email_entry.grid(row=3, column=1)

        self.password_label = tk.Label(master, text="Пароль:")
        self.password_label.grid(row=4, column=0)
        self.password_entry = tk.Entry(master, width=30, show="*")
        self.password_entry.grid(row=4, column=1)

        self.register_button = tk.Button(master, text="Зарегистрироваться", command=self.register)
        self.register_button.grid(row=5, column=0, columnspan=2)

    def register(self):
        fio = self.fio_entry.get()
        birth = self.birth_entry.get()
        login = self.login_entry.get()
        email = self.email_entry.get()
        password = self.password_entry.get()

        errors = []

        if not self.validate_fio(fio):
            errors.append("ФИО должно содержать только кириллические буквы")
        if not self.validate_birth(birth):
            errors.append("Год рождения должен быть в формате дд.мм.гггг")
        if not self.validate_login(login):
            errors.append("Логин должен содержать только латинские буквы")
        if not self.validate_email(email):
            errors.append("Email должен быть в формате example@example.com")
        if not self.validate_password(password):
            errors.append("Пароль должен быть не менее 6 символов")

        if errors:
            messagebox.showerror("Ошибка", "\n".join(errors))
        else:
            messagebox.showinfo("Успешно", "Вы успешно зарегистрировались!")

    def validate_fio(self, fio):
        return all(ord(c) >= 1040 and ord(c) <= 1103 for c in fio)

    def validate_birth(self, birth):
        try:
            day, month, year = map(int, birth.split("."))
            return 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2022
        except ValueError:
            return False

    def validate_login(self, login):
        return all(ord(c) >= 65 and ord(c) <= 90 or ord(c) >= 97 and ord(c) <= 122 for c in login)

    def validate_email(self, email):
        return "@" in email and email.count("@") == 1 and email.split("@")[0] and email.split("@")[1]

    def validate_password(self, password):
        return len(password) >= 6

root = tk.Tk()
form = RegistrationForm(root)
root.mainloop()
print('задание 4')
import tkinter as tk
from tkinter import messagebox

class RegistrationForm:
    def __init__(self, master):
        self.master = master
        self.master.title("Registration Form")

        self.fio_label = tk.Label(master, text="ФИО:")
        self.fio_label.grid(row=0, column=0)
        self.fio_entry = tk.Entry(master, width=30)
        self.fio_entry.grid(row=0, column=1)

        self.birth_label = tk.Label(master, text="Год рождения (дд.мм.гггг):")
        self.birth_label.grid(row=1, column=0)
        self.birth_entry = tk.Entry(master, width=30)
        self.birth_entry.grid(row=1, column=1)

        self.login_label = tk.Label(master, text="Логин:")
        self.login_label.grid(row=2, column=0)
        self.login_entry = tk.Entry(master, width=30)
        self.login_entry.grid(row=2, column=1)

        self.email_label = tk.Label(master, text="Email:")
        self.email_label.grid(row=3, column=0)
        self.email_entry = tk.Entry(master, width=30)
        self.email_entry.grid(row=3, column=1)

        self.password_label = tk.Label(master, text="Пароль:")
        self.password_label.grid(row=4, column=0)
        self.password_entry = tk.Entry(master, width=30, show="*")
        self.password_entry.grid(row=4, column=1)

        self.agree_checkbox = tk.BooleanVar()
        self.agree_checkbox.set(False)
        self.agree_label = tk.Label(master, text="Согласен на обработку персональных данных")
        self.agree_label.grid(row=5, column=0)
        self.agree_checkbox_button = tk.Checkbutton(master, variable=self.agree_checkbox)
        self.agree_checkbox_button.grid(row=5, column=1)

        self.register_button = tk.Button(master, text="Зарегистрироваться", command=self.register)
        self.register_button.grid(row=6, column=0, columnspan=2)

    def register(self):
        fio = self.fio_entry.get()
        birth = self.birth_entry.get()
        login = self.login_entry.get()
        email = self.email_entry.get()
        password = self.password_entry.get()
        agree = self.agree_checkbox.get()

        errors = []

        if not self.validate_fio(fio):
            errors.append("ФИО должно содержать только кириллические буквы")
        if not self.validate_birth(birth):
            errors.append("Год рождения должен быть в формате дд.мм.гггг")
        if not self.validate_login(login):
            errors.append("Логин должен содержать только латинские буквы")
        if not self.validate_email(email):
            errors.append("Email должен быть в формате example@example.com")
        if not self.validate_password(password):
            errors.append("Пароль должен быть не менее 6 символов")
        if not agree:
            errors.append("Вы должны согласиться на обработку персональных данных")

        if errors:
            messagebox.showerror("Ошибка", "\n".join(errors))
        else:
            messagebox.showinfo("Успешно", "Вы успешно зарегистрировались!")

    def validate_fio(self, fio):
        return all(ord(c) >= 1040 and ord(c) <= 1103 for c in fio)

    def validate_birth(self, birth):
        try:
            day, month, year = map(int, birth.split("."))
            return 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2022
        except ValueError:
            return False

    def validate_login(self, login):
        return all(ord(c) >= 65 and ord(c) <= 90 or ord(c) >= 97 and ord(c) <= 122 for c in login)

    def validate_email(self, email):
        return "@" in email and email.count("@") == 1 and email.split("@")[0] and email.split("@")[1]

    def validate_password(self, password):
        return len(password) >= 6

root = tk.Tk()
form = RegistrationForm(root)
root.mainloop()
print('задание 5')
import tkinter as tk

class RatingScale:
    def __init__(self, master):
        self.master = master
        self.master.title("Rating Scale")

        self.rating_label = tk.Label(master, text="Оценка:")
        self.rating_label.grid(row=0, column=0)

        self.rating_var = tk.IntVar()
        self.rating_var.set(0)

        self.radiobuttons = []
        for i in range(5):
            radiobutton = tk.Radiobutton(master, text=str(i+1),variable=self.rating_var, value=i+1)
            radiobutton.grid(row=0, column=i+1)
            self.radiobuttons.append(radiobutton)

        self.image_labels = []
        for i in range(5):
            image_label = tk.Label(master, image=self.get_image(i+1))
            image_label.grid(row=1, column=i+1)
            self.image_labels.append(image_label)

        self.submit_button = tk.Button(master, text="Submit", command=self.submit)
        self.submit_button.grid(row=2, column=0, columnspan=5)

        self.result_label = tk.Label(master, text="")
        self.result_label.grid(row=3, column=0, columnspan=5)

    def get_image(self, rating):
        # Return an image corresponding to the rating (e.g. a star image for 5, a smiley face for 4, etc.)
        pass

    def submit(self):
        rating = self.rating_var.get()
        if rating == 1:
            self.result_label.config(text="Студент не справился с заданием")
        elif rating == 2:
            self.result_label.config(text="Студент слабо справился с заданием")
        elif rating == 3:
            self.result_label.config(text="Студент удовлетворительно справился с заданием")
        elif rating == 4:
            self.result_label.config(text="Студент хорошо справился с заданием")
        elif rating == 5:
            self.result_label.config(text="Студент отлично справился с заданием")

root = tk.Tk()
rating_scale = RatingScale(root)
root.mainloop()
print('задание 6')
import tkinter as tk

class RatingScale:
    def __init__(self, master):
        self.master = master
        self.master.title("Student Evaluation")

        self.main_frame = tk.Frame(master)
        self.main_frame.pack()

        self.rating_frame = tk.Frame(self.main_frame)
        self.rating_frame.pack()

        self.rating_label = tk.Label(self.rating_frame, text="Оценка:")
        self.rating_label.pack(side=tk.LEFT)

        self.rating_var = tk.IntVar()
        self.rating_var.set(0)

        self.radiobuttons = []
        for i in range(5):
            radiobutton = tk.Radiobutton(self.rating_frame, text=str(i+1), variable=self.rating_var, value=i+1)
            radiobutton.pack(side=tk.LEFT)
            self.radiobuttons.append(radiobutton)

        self.image_frame = tk.Frame(self.main_frame)
        self.image_frame.pack()

        self.image_labels = []
        for i in range(5):
            image_label = tk.Label(self.image_frame, image=self.get_image(i+1))
            image_label.pack(side=tk.LEFT)
            self.image_labels.append(image_label)

        self.submit_button = tk.Button(self.main_frame, text="Submit", command=self.submit)
        self.submit_button.pack()

        self.result_frame = tk.Frame(self.main_frame)
        self.result_frame.pack()

        self.result_label = tk.Label(self.result_frame, text="")
        self.result_label.pack()

    def get_image(self, rating):
        # Return an image corresponding to the rating (e.g. a star image for 5, a smiley face for 4, etc.)
        pass

    def submit(self):
        rating = self.rating_var.get()
        if rating == 1:
            self.result_label.config(text="Студент не справился с заданием")
        elif rating == 2:
            self.result_label.config(text="Студент слабо справился с заданием")
        elif rating == 3:
            self.result_label.config(text="Студент удовлетворительно справился с заданием")
        elif rating == 4:
            self.result_label.config(text="Студент хорошо справился с заданием")
        elif rating == 5:
            self.result_label.config(text="Студент отлично справился с заданием")

root = tk.Tk()
rating_scale = RatingScale(root)
root.mainloop()
print('задание 7')
from os import system

from pickle import FALSE
import tkinter as tk

import math
from tkinter import Menu, ttk
from tkinter import messagebox
import math
import sys

class Calculator:

    def __init__(self, master):

        self.master = master

        self.entry = tk.Entry(master, width=35, font=("Arial", 16), bg="white", fg="black")

        self.entry.grid(row=0, column=0, columnspan=4)


        self.history = []


        self.create_buttons()


    def create_buttons(self):

        buttons = [

            '7', '8', '9', '/',

            '4', '5', '6', '*',

            '1', '2', '3', '-',

            '0', '.', '=', '+',

            'C', 'log', 'in', 'cos',

            'tg', 'ctg', 'history', 'x^2'

        ]


        row_val = 1

        col_val = 0


        for button in buttons:

            btn = tk.Button(self.master, text=button, width=5, command=lambda button=button: self.click_button(button), bg="purple", fg="white")

            btn.grid(row=row_val, column=col_val, padx=0, pady=0)

            col_val += 1

            if col_val > 3:

                col_val = 0

                row_val += 1


    def click_button(self, button):

        if button == '=':

            try:

                result = eval(self.entry.get())

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, result)

                self.history.append(self.entry.get())

            except Exception as e:

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, "Ошибка")

        elif button == 'C':

            self.entry.delete(0, tk.END)

        elif button == 'log':

            try:

                result = math.log10(float(self.entry.get()))

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, result)

            except Exception as e:

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, "Ошибка")

        elif button == 'in':

            try:

                result = math.sin(math.radians(float(self.entry.get())))

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, result)

            except Exception as e:

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, "Ошибка")

        elif button == 'cos':

            try:

                result = math.cos(math.radians(float(self.entry.get())))

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, result)

            except Exception as e:

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, "Ошибка")

        elif button == 'tg':

            try:

                result = math.tan(math.radians(float(self.entry.get())))

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, result)

            except Exception as e:

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, "Ошибка")

        elif button == 'ctg':

            try:

                result = 1 / math.tan(math.radians(float(self.entry.get())))

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, result)

            except Exception as e:

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, "Ошибка")

        elif button == 'history':

            self.show_history()

        elif button == 'x^2':

            try:

                result = float(self.entry.get()) ** 2

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, result)

            except Exception as e:

                self.entry.delete(0, tk.END)

                self.entry.insert(tk.END, "Ошибка")

        else:

            self.entry.insert(tk.END, button)


    def show_history(self):

        history_window = tk.Toplevel(self.master)

        history_window.title("История операций")

        history_text = tk.Text(history_window, width=40, height=10)

        history_text.pack()

        for i, item in enumerate(self.history):

            history_text.insert(tk.END, f"{i+1}. {item}\n")


root = tk.Tk()

root.title("Калькулятор")

root.configure(bg="purple")
root.option_add("*tearOff", FALSE)


calc = Calculator(root)

root.mainloop()
